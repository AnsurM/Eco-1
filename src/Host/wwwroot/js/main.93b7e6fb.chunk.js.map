{"version":3,"sources":["ApiClient.js","App.js","registerServiceWorker.js","index.js"],"names":["ApiClient","axios","create","baseURL","createTable","report","index","toggle","trData","dailyActivityPerformReport","map","dailyActivityPerform","react_default","a","createElement","key","rowSpan","colSpan","stationNo","locationName","activityPerformance","activities","activitiesElements","_loop","activity","activityInfo","find","i","activityName","push","perform","length","createActivities","activityPerform","Button","type","onClick","value","concat","locationId","react","stationName","Table","className","striped","bordered","responsive","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","parsed","qs","parse","window","location","search","substring","state","reports","fromDate","toDate","branchId","locations","modal","formData","selectedLocationId","selectedSno","isLoading","handleChange","bind","assertThisInitialized","handleSubmit","submitForm","handleFormChange","loadData","_this2","all","get","then","spread","setState","toConsumableArray","data","e","_this3","newState","target","split","objectSpread","loadEditForm","event","name","defineProperty","findIndex","el","pkActivityPerformDetailId","match","replace","isPerform","checked","preventDefault","_this4","stringify","moment","format","json","Sno","_this5","_this6","post","prevState","_this7","tables","Container","Row","Card","CardHeader","CardBody","Form","inline","onSubmit","FormGroup","Label","for","Input","id","onChange","locationData","Spinner","color","Modal","isOpen","props","ModalHeader","ModalBody","date","Date","createdOn","getDate","getMonth","getUTCFullYear","htmlFor","ModalFooter","Component","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.93b7e6fb.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const ApiClient = axios.create({\r\n  baseURL:\r\n    process.env.NODE_ENV === \"production\"\r\n      ? \"http://ecoservices.pk\"\r\n      : \"http://localhost:5000\"\r\n});\r\n","import axios from \"axios\";\r\nimport React, { Component, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Table,\r\n  Container,\r\n  Row,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Spinner,\r\n  CustomInput\r\n} from \"reactstrap\";\r\nimport moment from \"moment\";\r\nimport { ApiClient } from \"./ApiClient\";\r\nimport qs from \"qs\";\r\n\r\n/**\r\n  @typedef {Object} ActivityPerformance\r\n  @property {string} perform\r\n  @property {string} activityName\r\n */\r\n\r\n/**\r\n  @typedef {Object} DailyActivityPerform\r\n  @property {number} stationNo\r\n  @property {string} locationName\r\n  @property {number} locationId\r\n  @property {ActivityPerformance[]} activityPerform\r\n */\r\n\r\n/**\r\n  @typedef {Object} Report\r\n  @property {string} stationName\r\n  @property {DailyActivityPerform[]} dailyActivityPerformReport\r\n  @property {string[]} activities\r\n */\r\n\r\n/**\r\n  @typedef {Object} Location\r\n  @property {number} locationId\r\n  @property {string} locationName\r\n */\r\n\r\n/**\r\n  @typedef {Object} DailyReport\r\n  @property {number} pkActivityPerformDetailId\r\n  @property {number} fkActivityPerformId\r\n  @property {number} fkActivityId\r\n  @property {Date} createdOn\r\n  @property {string} perform\r\n  @property {Boolean} isPerform\r\n  @property {string} name\r\n*/\r\n\r\n/**\r\n  @typedef {Object} State\r\n  @property {Report[]} reports\r\n  @property { Date } fromDate\r\n  @property { Date } toDate\r\n  @property { string } focusedInput\r\n  @property { Number } locationId\r\n  @property { Number } branchId\r\n  @property {Location[]} locations\r\n  @property {DailyReport[]} formData\r\n  @property {Boolean} modal\r\n  @property {number} selectedLocationId\r\n  @property {string} selectedSno\r\n  @property {Boolean} isLoading\r\n */\r\n\r\n/**\r\n * @param {ActivityPerformance[]} activityPerformance\r\n * @param {string[]} activities\r\n */\r\nfunction createActivities(activityPerformance, activities) {\r\n  const activitiesElements = [];\r\n  if (activityPerformance) {\r\n    for (let index = 0; index <= activities.length - 1; index++) {\r\n      const activity = activities[index];\r\n      const activityInfo = activityPerformance.find(\r\n        i => i.activityName === activity\r\n      );\r\n      if (activityInfo) {\r\n        activitiesElements.push(\r\n          <td rowSpan=\"1\" colSpan=\"1\" key={index}>\r\n            {activityInfo.perform}\r\n          </td>\r\n        );\r\n      } else {\r\n        activitiesElements.push(\r\n          <td rowSpan=\"1\" colSpan=\"1\" key={index}>\r\n            &nbsp;\r\n          </td>\r\n        );\r\n      }\r\n    }\r\n  } else {\r\n    for (let index = 0; index <= activities.length - 1; index++) {\r\n      activitiesElements.push(\r\n        <td rowSpan=\"1\" colSpan=\"1\" key={index}>\r\n          &nbsp;\r\n        </td>\r\n      );\r\n    }\r\n  }\r\n\r\n  return activitiesElements;\r\n}\r\n\r\n/**\r\n * @param {Report} report\r\n * @param {Number} index\r\n * @param {function} toggle\r\n */\r\nfunction createTable(report, index, toggle) {\r\n  const trData = report.dailyActivityPerformReport.map(\r\n    (dailyActivityPerform, index) => (\r\n      <tr key={index}>\r\n        <td rowSpan=\"1\" colSpan=\"1\">\r\n          {dailyActivityPerform.stationNo}\r\n        </td>\r\n        <td rowSpan=\"1\" colSpan=\"1\">\r\n          {dailyActivityPerform.locationName}\r\n        </td>\r\n        {createActivities(\r\n          dailyActivityPerform.activityPerform,\r\n          report.activities\r\n        )}\r\n        <td>\r\n          <Button\r\n            type=\"Button\"\r\n            onClick={toggle}\r\n            value={`${dailyActivityPerform.locationId},${\r\n              dailyActivityPerform.stationNo\r\n            }`}\r\n          >\r\n            Edit\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    )\r\n  );\r\n\r\n  return (\r\n    <Fragment key={index}>\r\n      <h4>{report.stationName}</h4>\r\n      <Table className=\"text-center\" striped bordered responsive>\r\n        <tbody>\r\n          <tr className=\"table-secondary\">\r\n            <td rowSpan=\"1\" colSpan=\"2\">\r\n              Station Details\r\n            </td>\r\n            {report.activities && (\r\n              <td rowSpan=\"1\" colSpan={report.activities.length + 1}>\r\n                Activity Perform\r\n              </td>\r\n            )}\r\n          </tr>\r\n          <tr>\r\n            <td rowSpan=\"1\" colSpan=\"1\">\r\n              Station No\r\n            </td>\r\n            <td rowSpan=\"1\" colSpan=\"1\">\r\n              Location Name\r\n            </td>\r\n            {report.activities &&\r\n              report.activities.map((activity, index) => (\r\n                <td rowSpan=\"1\" colSpan=\"1\" key={index}>\r\n                  {activity}\r\n                </td>\r\n              ))}\r\n            <td>Action</td>\r\n          </tr>\r\n          {trData}\r\n        </tbody>\r\n      </Table>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    const parsed = qs.parse(window.location.search.substring(1));\r\n    /** @type {State} */\r\n    this.state = {\r\n      reports: [],\r\n      fromDate: \"\",\r\n      toDate: \"\",\r\n      locationId: 0,\r\n      branchId: parsed.branchId,\r\n      locations: [],\r\n      modal: false,\r\n      formData: [],\r\n      selectedLocationId: 0,\r\n      selectedSno: \"\",\r\n      isLoading: true\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.toggle = this.toggle.bind(this);\r\n    this.submitForm = this.submitForm.bind(this);\r\n    this.handleFormChange = this.handleFormChange.bind(this);\r\n    this.loadData = this.loadData.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadData();\r\n  }\r\n\r\n  loadData() {\r\n    axios\r\n      .all([\r\n        ApiClient.get(`/Company/data?branchId=${this.state.branchId}`),\r\n        ApiClient.get(`/Company/locations/branchId/${this.state.branchId}`)\r\n      ])\r\n      .then(\r\n        axios.spread((reports, locations) => {\r\n          this.setState({\r\n            reports: [...reports.data],\r\n            locations: [...locations.data],\r\n            isLoading: false\r\n          });\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @param {Event} e\r\n   */\r\n  toggle(e) {\r\n    var newState = {\r\n      modal: !this.state.modal\r\n    };\r\n    if (!this.state.modal) {\r\n      var value = e.target.value.split(\",\");\r\n      newState.selectedLocationId = value[0];\r\n      newState.selectedSno = value[1];\r\n    }\r\n    this.setState(\r\n      {\r\n        ...newState\r\n      },\r\n      () => {\r\n        if (this.state.modal) {\r\n          this.loadEditForm(\r\n            this.state.selectedLocationId,\r\n            this.state.branchId,\r\n            this.state.selectedSno\r\n          );\r\n        } else {\r\n          this.setState({\r\n            isLoading: true\r\n          });\r\n          this.loadData();\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Event} event\r\n   */\r\n  handleChange(event) {\r\n    var name = event.target.name;\r\n    this.setState({ [name]: event.target.value });\r\n  }\r\n\r\n  /**\r\n   * @param {Event} event\r\n   */\r\n  handleFormChange(event) {\r\n    debugger;\r\n    var name = event.target.name;\r\n    var formData = [...this.state.formData];\r\n    var index = formData.findIndex(function(el) {\r\n      return el.pkActivityPerformDetailId == name.match(/\\d+/)[0];\r\n    });\r\n    if (name.replace(/[0-9]/g, \"\") === \"performText\") {\r\n      formData[index].perform = event.target.value;\r\n    } else if (name.replace(/[0-9]/g, \"\") === \"isPerform\") {\r\n      formData[index].isPerform = event.target.checked;\r\n    }\r\n    this.setState({ formData: formData });\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * @param {Event} event\r\n   */\r\n  handleSubmit(event) {\r\n    const data = qs.stringify({\r\n      branchId: this.state.branchId,\r\n      locationId: this.state.locationId === 0 ? null : this.state.locationId,\r\n      fromDate: moment(this.state.fromDate).format(\"DD/MM/YYYY\"),\r\n      toDate: moment(this.state.toDate).format(\"DD/MM/YYYY\")\r\n    });\r\n    ApiClient.get(`/Company/data?${data}`).then(json => {\r\n      this.setState({\r\n        reports: [...json.data]\r\n      });\r\n    });\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * @param {number} locationId\r\n   * @param {number} branchId\r\n   * @param {string} Sno\r\n   */\r\n  loadEditForm(locationId, branchId, Sno) {\r\n    ApiClient.get(\r\n      \"/Company/GetData?\" +\r\n        qs.stringify({\r\n          locationId,\r\n          branchId,\r\n          Sno\r\n        })\r\n    ).then(json => {\r\n      this.setState({\r\n        formData: [...json.data].map(i => {\r\n          if (!i.perform) i.perform = \"\";\r\n          return i;\r\n        })\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {Event} event\r\n   */\r\n  submitForm(event) {\r\n    ApiClient.post(\"/Company/UpdateData\", {\r\n      ...this.state.formData.find(function(el) {\r\n        return el.pkActivityPerformDetailId === event.target.value;\r\n      })\r\n    }).then(() => {\r\n      this.setState(prevState => ({\r\n        modal: !prevState.modal\r\n      }));\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const tables = this.state.reports.map((report, index) =>\r\n      createTable(report, index, this.toggle)\r\n    );\r\n    return (\r\n      <Container>\r\n        <br />\r\n        <Row>\r\n          <Card>\r\n            <CardHeader>Search Box</CardHeader>\r\n            <CardBody>\r\n              <Form inline onSubmit={this.handleSubmit}>\r\n                <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\r\n                  <Label for=\"fromDate\" className=\"mr-sm-2\">\r\n                    Starting Date\r\n                  </Label>\r\n                  <Input\r\n                    type=\"date\"\r\n                    id=\"fromDate\"\r\n                    name=\"fromDate\"\r\n                    value={this.state.fromDate}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\r\n                  <Label for=\"toDate\" className=\"mr-sm-2\">\r\n                    Ending Date\r\n                  </Label>\r\n                  <Input\r\n                    type=\"date\"\r\n                    id=\"toDate\"\r\n                    name=\"toDate\"\r\n                    value={this.state.toDate}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\r\n                  <Label for=\"locationDropDown\" className=\"mr-sm-2\">\r\n                    Location\r\n                  </Label>\r\n                  <Input\r\n                    type=\"select\"\r\n                    id=\"locationDropDown\"\r\n                    name=\"locationId\"\r\n                    value={this.state.locationId}\r\n                    onChange={this.handleChange}\r\n                  >\r\n                    <option value={null}>Select All</option>\r\n                    {this.state.locations.map((locationData, index) => (\r\n                      <option key={index} value={locationData.locationId}>\r\n                        {locationData.locationName}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                </FormGroup>\r\n                <Button>Search</Button>\r\n              </Form>\r\n            </CardBody>\r\n          </Card>\r\n        </Row>\r\n        <br />\r\n        <Row>\r\n          {this.state.isLoading ? (\r\n            <div className=\"d-flex justify-content-center\">\r\n              <Spinner color=\"dark\" />\r\n            </div>\r\n          ) : (\r\n            <div>{tables}</div>\r\n          )}\r\n        </Row>\r\n        <Row>\r\n          <Modal\r\n            isOpen={this.state.modal}\r\n            toggle={this.toggle}\r\n            className={this.props.className}\r\n          >\r\n            <ModalHeader toggle={this.toggle}>Edit</ModalHeader>\r\n            <ModalBody>\r\n              <Table responsive={true} striped={true}>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Activity</th>\r\n                    <th>Date</th>\r\n                    <th>Is Performed</th>\r\n                    <th>Perform</th>\r\n                    <th>Action</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {this.state.formData.map((data, index) => {\r\n                    var date = new Date(data.createdOn);\r\n                    return (\r\n                      <tr key={index}>\r\n                        <td>{data.name}</td>\r\n                        <td>\r\n                          {date.getDate()}/{date.getMonth()}/\r\n                          {date.getUTCFullYear()}\r\n                        </td>\r\n                        <td className=\"text-center\">\r\n                          <div className=\"custom-control custom-checkbox mr-sm-2\">\r\n                            {data.isPerform}\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              className=\"custom-control-input\"\r\n                              checked={data.isPerform}\r\n                              name={\r\n                                \"isPerform\" + data.pkActivityPerformDetailId\r\n                              }\r\n                              id={\r\n                                \"performText\" +\r\n                                data.pkActivityPerformDetailId +\r\n                                \"id\"\r\n                              }\r\n                              onChange={this.handleFormChange}\r\n                            />\r\n                            <label\r\n                              className=\"custom-control-label\"\r\n                              htmlFor={\r\n                                \"performText\" +\r\n                                data.pkActivityPerformDetailId +\r\n                                \"id\"\r\n                              }\r\n                            />\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <Input\r\n                            type=\"number\"\r\n                            value={data.perform}\r\n                            name={\r\n                              \"performText\" + data.pkActivityPerformDetailId\r\n                            }\r\n                            onChange={this.handleFormChange}\r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <Button\r\n                            color=\"primary\"\r\n                            onClick={this.submitForm}\r\n                            value={data.pkActivityPerformDetailId}\r\n                          >\r\n                            Edit\r\n                          </Button>\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </Table>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button color=\"secondary\" onClick={this.toggle}>\r\n                Close\r\n              </Button>\r\n            </ModalFooter>\r\n          </Modal>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n  reports: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      stationName: PropTypes.string,\r\n      dailyActivityPerformReport: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          stationNo: PropTypes.number,\r\n          locationName: PropTypes.string,\r\n          activityPerform: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n              perform: PropTypes.string,\r\n              activityName: PropTypes.string\r\n            })\r\n          ),\r\n          locationId: PropTypes.number\r\n        })\r\n      ),\r\n      activities: PropTypes.arrayOf(PropTypes.string)\r\n    })\r\n  ),\r\n  fromDate: PropTypes.instanceOf(Date),\r\n  toDate: PropTypes.instanceOf(Date),\r\n  locationId: PropTypes.number,\r\n  branchId: PropTypes.number,\r\n  locations: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      locationId: PropTypes.number,\r\n      locationName: PropTypes.string\r\n    })\r\n  ),\r\n  selectedLocationId: PropTypes.number,\r\n  formData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      pkActivityPerformDetailId: PropTypes.number,\r\n      createdOn: PropTypes.instanceOf(Date),\r\n      perform: PropTypes.string,\r\n      isPerform: PropTypes.bool\r\n    })\r\n  )\r\n};\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}